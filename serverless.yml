service: bundlesize-service
frameworkVersion: '=1.26.1'

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline # must be last

custom:
  webpackIncludeModules: true
  stage: ${opt:stage, self:provider.stage}
  storeTable: '${self:service}-store-table-${self:custom.stage}'
  dynamodb:
    start:
      port: 8000
      migrate: true
      inMemory: true

provider:
  name: aws
  region: us-east-1
  runtime: nodejs6.10
  memorySize: 512
  timeout: 30
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["StoreTable", "Arn" ] }
  environment:
    STORE_TABLE: ${self:custom.storeTable}
    LAMBDA_PREFIX: 'bundlesize-service-${opt:stage, self:provider.stage}-'

functions:
  # Endpoints
  keyword:
    handler: src/router.app
    events:
      - http:
          path: /
          method: get
      - http:
          path: /store
          method: post

resources:
  Resources:
    StoreTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: repoOwner
            AttributeType: S
          -
            AttributeName: repoBranch
            AttributeType: S
          -
            AttributeName: timestamp
            AttributeType: S
        KeySchema:
          -
            AttributeName: repoOwner
            KeyType: HASH
          -
            AttributeName: repoBranch
            KeyType: RANGE
        LocalSecondaryIndexes:
          -
            IndexName: timestamp
            KeySchema:
                -
                    AttributeName: repoOwner
                    KeyType: HASH
                -
                    AttributeName: timestamp
                    KeyType: RANGE
            Projection:
                ProjectionType: KEYS_ONLY
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.storeTable}
